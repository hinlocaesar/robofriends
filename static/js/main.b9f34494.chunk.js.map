{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","cardComponent","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundry","state","hasError","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLocaleLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAkBeA,EAhBF,SAACC,GACV,OAEG,sBAAKC,UAAU,sDAAf,UACK,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,gCACI,6BAAKJ,EAAMK,OACX,6BAAKL,EAAMM,eCUZC,EAfE,SAACP,GAAU,IACnBQ,EAAUR,EAAVQ,OACCC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OAAU,cAAC,EAAD,CACVR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,OAHIM,MAKzB,OACJ,8BACSH,KCCMI,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,qBAAKd,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCHI,EARA,SAACnB,GACZ,OACI,qBAAKoB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACGvB,EAAMwB,YCkBFC,E,kDApBX,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACD0B,MAAM,CACPC,UAAS,GAHC,E,qDAOlB,WACQC,KAAKC,SAAS,CAACF,UAAS,M,oBAGhC,WACA,OAA2B,IAAxBC,KAAKF,MAAMC,SACF,uDAELC,KAAK5B,MAAMwB,a,GAhBKM,aCqDZC,G,wDA9Cf,aAAc,IAAD,8BACT,gBAeJC,eAAe,SAACC,GACZ,EAAKJ,SAAS,CAACf,YAAYmB,EAAMC,OAAOC,SAfxC,EAAKT,MAAO,CACRlB,OAAO,GACPM,YAAY,IAJP,E,qDASb,WAAqB,IAAD,OAChBsB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKX,SAAS,CAAErB,OAAQgC,S,oBAS9C,WAAS,IAAD,EAEqBZ,KAAKF,MAA1BlB,EAFA,EAEAA,OAAOM,EAFP,EAEOA,YACL2B,EAAejC,EAAOkC,QAAO,SAAAC,GAC/B,OAAOA,EAAMtC,KAAKuC,oBAAoBC,SAAS/B,EAAY8B,wBAG/D,OAAmB,IAAhBpC,EAAOsC,OACC,oBAAI7C,UAAU,KAAd,qBAGH,sBAAKA,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWc,aAAca,KAAKI,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,UACA,cAAC,EAAD,CAAUxB,OAAQiC,e,GAtChBX,cCIHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OAER,cAAC,EAAD,IACCC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.b9f34494.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n    return(\r\n   \r\n       <div className=\"bg-light-green br3 pad3 ma2 grow dib bw shadow-5 tc\">     \r\n            <img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <h2>{props.email}</h2>\r\n               \r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = (props) =>{\r\n    let {robots} = props\r\n    const cardComponent = robots.map((user,i)=>{\r\n        return    <Card key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email}/>\r\n    })\r\n    return(\r\n<div>\r\n        {cardComponent}\r\n</div>\r\n);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=> {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n          {props.children}\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(){\r\n            this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n    if(this.state.hasError === true){\r\n         return <h1>Opp. That is not good</h1>\r\n    }\r\n    return this.props.children\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\nconstructor(){\r\n    super()\r\n    this.state ={\r\n        robots:[],\r\n        searchfield:''\r\n    }\r\n}\r\n\r\n\r\ncomponentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(users => {this.setState({ robots: users})});\r\n  }\r\n\r\n\r\nonSearchChange=(event)=>{\r\n    this.setState({searchfield:event.target.value}) //react rule if you want to set sate\r\n\r\n}\r\n\r\nrender(){\r\n\r\n   let {robots,searchfield} =this.state;\r\n    const filterRobots = robots.filter(robot=>{\r\n        return robot.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase())\r\n    });\r\n\r\n    if(robots.length===0){\r\n        return <h1 className='tc'>LOAGING</h1>\r\n    }else{\r\n        return(\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                <ErrorBoundry>\r\n                <CardList robots={filterRobots}/>\r\n                </ErrorBoundry>\r\n            </Scroll>\r\n        </div>\r\n        );\r\n    }\r\n\r\n}\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  \r\n <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}